name: Build OpenWrt for Allwinner H8

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      storage_type:
        description: '存储类型 (emmc 或 nand)'
        required: true
        default: 'emmc'
        type: choice
        options:
          - emmc
          - nand
  push:
    branches:
      - main
      - master
    paths-ignore:
      - '*.md'
      - 'LICENSE'
      - '.gitignore'
  pull_request:
    paths-ignore:
      - '*.md'
      - 'LICENSE'
      - '.gitignore'

env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: openwrt-22.03
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  PROFILE: orangepi_one
  PACKAGES: "kmod-usb-storage kmod-usb2 kmod-usb3 luci block-mount kmod-fs-ext4 kmod-fs-vfat kmod-nls-cp437 kmod-nls-iso8859-1"

jobs:
  build:
    runs-on: ubuntu-20.04
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v3

    - name: 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        echo "STORAGE_TYPE=${{ github.event.inputs.storage_type || 'emmc' }}" >> $GITHUB_ENV

    - name: 克隆源代码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: 加载自定义配置
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: 更新 & 安装 feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: 加载自定义配置
      run: |
        [ -e files ] && cp -r files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: 检测RAM大小
      id: detect_ram
      run: |
        # 检查是否有硬件配置文件
        if [ -f "hardware_profile" ]; then
          RAM_SIZE=$(cat hardware_profile)
        elif [ -f ".2gb_version" ]; then
          RAM_SIZE="2g"
        else
          RAM_SIZE="1g"  # 默认为1GB
        fi
        echo "RAM_SIZE=$RAM_SIZE" >> $GITHUB_ENV
        echo "ram_size=$RAM_SIZE" >> $GITHUB_OUTPUT
        echo "检测到RAM大小: $RAM_SIZE"

    - name: 生成OpenWrt配置
      run: |
        cd openwrt
        echo "CONFIG_TARGET_sunxi=y" > .config
        echo "CONFIG_TARGET_sunxi_cortexa7=y" >> .config
        echo "CONFIG_TARGET_sunxi_cortexa7_DEVICE_${PROFILE}=y" >> .config
        
        # 添加自定义软件包
        for pkg in $PACKAGES; do
          echo "CONFIG_PACKAGE_$pkg=y" >> .config
        done
        
        # 根据RAM大小调整内核参数
        if [ "${{ env.RAM_SIZE }}" = "2g" ]; then
          echo "CONFIG_TARGET_KERNEL_PARTSIZE=128" >> .config
          echo "CONFIG_TARGET_ROOTFS_PARTSIZE=1024" >> .config
        else
          echo "CONFIG_TARGET_KERNEL_PARTSIZE=64" >> .config
          echo "CONFIG_TARGET_ROOTFS_PARTSIZE=512" >> .config
        fi
        
        # 确保生成img格式固件
        echo "CONFIG_TARGET_ROOTFS_TARGZ=y" >> .config
        echo "CONFIG_TARGET_ROOTFS_EXT4FS=y" >> .config
        echo "CONFIG_TARGET_ROOTFS_SQUASHFS=y" >> .config
        echo "CONFIG_TARGET_IMAGES_GZIP=y" >> .config
        
        make defconfig

    - name: 下载软件包
      id: package
      run: |
        cd openwrt
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 编译固件
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: 检查空间使用情况
      if: (!cancelled())
      run: df -hT

    - name: 上传bin目录
      uses: actions/upload-artifact@v3
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: 整理文件
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        
        # 处理img.gz文件 - 解压并重命名为-emmc-burn.img格式
        for file in openwrt-*-sunxi-cortexa7-*-squashfs-sdcard.img.gz; do
          if [ -f "$file" ]; then
            # 解压img.gz文件
            gzip -d "$file"
            base_name="${file%.gz}"
            
            # 按照要求重命名为-emmc-burn.img格式
            new_name="openwrt-${{ env.RAM_SIZE }}-${{ env.STORAGE_TYPE }}-burn.img"
            mv "$base_name" "$new_name"
            echo "重命名: $base_name -> $new_name"
          fi
        done
        
        # 处理其他文件
        for file in openwrt-*-sunxi-cortexa7-*; do
          if [[ $file == *.bin || $file == *.img ]]; then
            new_name=$(echo $file | sed "s/cortexa7-/cortexa7-${{ env.RAM_SIZE }}_${{ env.STORAGE_TYPE }}-/")
            mv "$file" "$new_name"
            echo "重命名: $file -> $new_name"
          fi
        done
        
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传固件
      uses: actions/upload-artifact@v3
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}_${{ env.RAM_SIZE }}_${{ env.STORAGE_TYPE }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: 生成发布标签
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")-${{ env.RAM_SIZE }}_${{ env.STORAGE_TYPE }}" >> $GITHUB_OUTPUT
        touch release.txt
        echo "### Allwinner H8 OpenWrt固件 (${{ env.RAM_SIZE }} RAM, ${{ env.STORAGE_TYPE }} 存储)" >> release.txt
        echo "- 编译时间: $(date +"%Y-%m-%d %H:%M")" >> release.txt
        echo "- OpenWrt版本: ${{ env.REPO_BRANCH }}" >> release.txt
        echo "- 设备: ${{ env.PROFILE }}" >> release.txt
        echo "- RAM大小: ${{ env.RAM_SIZE }}" >> release.txt
        echo "- 存储类型: ${{ env.STORAGE_TYPE }}" >> release.txt
        echo "" >> release.txt
        echo "### 默认登录信息" >> release.txt
        echo "- 默认IP地址: 192.168.1.1" >> release.txt
        echo "- 默认用户名: root" >> release.txt
        echo "- 默认密码: 无密码，首次登录需设置" >> release.txt
        echo "" >> release.txt
        echo "### 刷入方法" >> release.txt
        echo "1. 下载 openwrt-${{ env.RAM_SIZE }}-${{ env.STORAGE_TYPE }}-burn.img 文件" >> release.txt
        echo "2. 使用 Win32DiskImager 或 balenaEtcher 等工具将镜像写入SD卡或U盘" >> release.txt
        echo "3. 对于EMMC刷入:" >> release.txt
        echo "   - 将SD卡插入设备并启动" >> release.txt
        echo "   - 登录系统后，执行以下命令将系统刷入EMMC:" >> release.txt
        echo "   ```" >> release.txt
        echo "   dd if=/dev/mmcblk0 of=/dev/mmcblk1 bs=4M status=progress" >> release.txt
        echo "   ```" >> release.txt
        echo "   - 完成后关机，取出SD卡，重新启动即可从EMMC启动" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传固件到发布
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*